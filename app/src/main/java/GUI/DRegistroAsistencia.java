package GUI;

import Entities.Asistencia;
import Entities.Estado;
import Entities.Usuario;
import Services.AsistenciaService;
import Services.EstadoService;
import Services.UsuarioService;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;

public class DRegistroAsistencia extends javax.swing.JDialog {
    
    Usuario usuario;
    LocalDate fechaRegistro;
    LocalTime horaRegistro;
    
    public DRegistroAsistencia(java.awt.Frame parent, boolean modal, int idUsuario, int tipoRegistro) {
        super(parent, modal);
        initComponents();
        initData(idUsuario, tipoRegistro);
    }
    
    private void initData(int idUsuario, int tipoRegistro){
        //OBTENER datos del usuario.
        UsuarioService userS = new UsuarioService();
        usuario = userS.leer(idUsuario);
        fechaRegistro = LocalDate.now();
        horaRegistro = LocalTime.now().withSecond(0).withNano(0);
        
        //01. CARGAR código de usuario.
        tfdCodigoUsuario.setText(String.valueOf(usuario.getIdUsuario()));
        //02. CARGAR nombre y apellido de usuario.
        tfdUsuario.setText(usuario.getNombre() + " " + usuario.getApellido());
        //03. CARGAR fecha y hora actuales.
        tfdFechaRegistro.setText(fechaRegistro.toString());
        tfdHoraMarcada.setText(horaRegistro.toString());
        //04. CARGAR el estado actual.
        /*
        Lo ideal sería: Cargar estados, hacer una resta de la la hora actual - hora esperada
        y si el resultado es negativo estamos a tiempo. Si es positivo entonces debemos
        hacer una operación extra para tener un tiempo de tolerancia, 20 mins por ejemplo.
        Obtener día -> Obtener horario de ese día -> Horario de entrada solamente.
        */
        // A. Cargar Estados.
        cbxEstado.removeAllItems();
        EstadoService estadoS = new EstadoService();
        for(Estado estado : estadoS.listar()){
            cbxEstado.addItem(estado.getNombre());
        }
        // TODO: Esta parte está por mejorar.
        // B. Seleccionar Estado
        LocalTime diffTime = userS.getEntrada(idUsuario);
        LocalTime maxTime = LocalTime.of(0, 10);
        Duration result = Duration.between(diffTime, maxTime);
        if (result.isNegative()){
            cbxEstado.setSelectedIndex(2);
            System.out.println("Somare, son más de 10 mins.");
        }
        // 05. Cargar el tipo de registro.
        cbxTipoRegistro.setSelectedIndex(tipoRegistro);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblCodigoUsuario = new javax.swing.JLabel();
        tfdCodigoUsuario = new javax.swing.JTextField();
        tfdFechaRegistro = new javax.swing.JTextField();
        lblFechaRegistro = new javax.swing.JLabel();
        lblUsuario = new javax.swing.JLabel();
        tfdUsuario = new javax.swing.JTextField();
        lblHoraMarcada = new javax.swing.JLabel();
        tfdHoraMarcada = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        lblTipoRegistro = new javax.swing.JLabel();
        lblContra = new javax.swing.JLabel();
        tfdpassContra = new javax.swing.JPasswordField();
        btnCancelar = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        cbxTipoRegistro = new javax.swing.JComboBox<>();
        ckbxTipoRegistro = new javax.swing.JCheckBox();
        cbxEstado = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REGISTRO: Asistencia");

        lblTitle.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.focusedBorderColor"));
        lblTitle.setFont(new java.awt.Font("Cascadia Code", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("REGISTRO DE ASISTENCIA");
        lblTitle.setOpaque(true);

        lblCodigoUsuario.setText("COD-Usuario");

        tfdCodigoUsuario.setEditable(false);
        tfdCodigoUsuario.setText("0");
        tfdCodigoUsuario.setEnabled(false);

        tfdFechaRegistro.setEditable(false);
        tfdFechaRegistro.setText("00/00/2000");
        tfdFechaRegistro.setEnabled(false);

        lblFechaRegistro.setText("Fecha de Registro");

        lblUsuario.setText("Usuario");

        tfdUsuario.setEditable(false);
        tfdUsuario.setText("<Sin Nombre>");
        tfdUsuario.setEnabled(false);

        lblHoraMarcada.setText("Hora Marcada");

        tfdHoraMarcada.setEditable(false);
        tfdHoraMarcada.setText("00:00");
        tfdHoraMarcada.setEnabled(false);

        lblEstado.setText("Estado");

        lblTipoRegistro.setText("Tipo Registro");

        lblContra.setText("Contraseña");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        cbxTipoRegistro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENTRADA", "SALIDA" }));
        cbxTipoRegistro.setEnabled(false);

        ckbxTipoRegistro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ckbxTipoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbxTipoRegistroActionPerformed(evt);
            }
        });

        cbxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Sin Estado>" }));
        cbxEstado.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 17, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfdpassContra)
                            .addComponent(lblCodigoUsuario, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfdCodigoUsuario)
                            .addComponent(lblUsuario, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfdUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(lblEstado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblContra, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfdFechaRegistro)
                            .addComponent(lblFechaRegistro)
                            .addComponent(lblHoraMarcada)
                            .addComponent(tfdHoraMarcada)
                            .addComponent(lblTipoRegistro)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxTipoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxTipoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodigoUsuario)
                    .addComponent(lblFechaRegistro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfdCodigoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfdFechaRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuario)
                    .addComponent(lblHoraMarcada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfdHoraMarcada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstado)
                    .addComponent(lblTipoRegistro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ckbxTipoRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(cbxTipoRegistro)
                    .addComponent(cbxEstado))
                .addGap(18, 18, 18)
                .addComponent(lblContra)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfdpassContra)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ckbxTipoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbxTipoRegistroActionPerformed
        cbxTipoRegistro.setEnabled(ckbxTipoRegistro.isSelected());
    }//GEN-LAST:event_ckbxTipoRegistroActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // VALIDAR contraseña.
        if (!Arrays.equals(tfdpassContra.getPassword(), usuario.getContrasenia().toCharArray())){
            DialogAlert.genericDialog("Contraseña no coincide.", "CONTRASEÑA ERRÓNEA", 2);
            return;
        }
        // CREAR servicios para las consultas.
        AsistenciaService asistenciaS = new AsistenciaService();
        EstadoService estadoS = new EstadoService();
        Asistencia asistencia;
        
        // OBTENER la asistencia marcada hoy.
        asistencia = asistenciaS.getTodayAsistencia(usuario.getIdUsuario());
        // EJECUTAR si no hay asistencia registrada (Entrada o Salida).
        System.out.println(asistencia);
        if (asistencia == null){
            // VALIDAR que no se quiera registrar salida primero.
            if (cbxTipoRegistro.getSelectedIndex() == 1){
                DialogAlert.genericDialog("¡No Hay Registro de Entrada!\nRegistre primero la entrada para registrar una salida.", "NO SE PUDO REGISTRAR", 2);
                return;
            }
            
            // CREAR Entidad Asistencia para agregar a la BD.
            asistencia = new Asistencia(
                Integer.parseInt(tfdCodigoUsuario.getText()),
                fechaRegistro,
                horaRegistro,
                null,
                estadoS.getIdEstado(cbxEstado.getSelectedItem().toString())
            );
            if (asistenciaS.agregar(asistencia)){
                this.dispose();
            }
        // EJECUTAR si hay asistencia marcada hoy.
        } else {
            // VALIDAR que no se quiera registrar salida primero.
            if (cbxTipoRegistro.getSelectedIndex() == 0){
                DialogAlert.genericDialog("¡Ya existe un registro de entrada!\nRegistre su salida ahora por favor..", "NO SE PUDO REGISTRAR", 2);
                return;
            }
            
            // MODIFICAR y ACTUALIZAR la asistencia (hora salida) en la BD.
            asistencia.setHoraSalida(horaRegistro);
            
            if (asistenciaS.modificar(asistencia)){
                this.dispose();
            }
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cbxEstado;
    private javax.swing.JComboBox<String> cbxTipoRegistro;
    private javax.swing.JCheckBox ckbxTipoRegistro;
    private javax.swing.JLabel lblCodigoUsuario;
    private javax.swing.JLabel lblContra;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblFechaRegistro;
    private javax.swing.JLabel lblHoraMarcada;
    private javax.swing.JLabel lblTipoRegistro;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTextField tfdCodigoUsuario;
    private javax.swing.JTextField tfdFechaRegistro;
    private javax.swing.JTextField tfdHoraMarcada;
    private javax.swing.JTextField tfdUsuario;
    private javax.swing.JPasswordField tfdpassContra;
    // End of variables declaration//GEN-END:variables
}
